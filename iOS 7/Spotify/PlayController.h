/*
 * This header is generated by weak_classdump 0.2
 * on Wednesday, April 30, 2014 at 2:18:26 PM Central European Summer Time
 * Operating System: Version 7.0.6 (Build 11B651)
 * weak_classdump is Freeware by Elias Limneos.
 *
 */

#import <SPObjectRepresentation.h>
#import <SpotifyDebugProtocol.h>
#import <PlayControllerSkipsRemainingManagerDelegate.h>
#import <Player.h>
#import <Previewer.h>

@interface PlayController : NSObject <SPObjectRepresentation, SpotifyDebugProtocol, PlayControllerSkipsRemainingManagerDelegate, Player, Previewer> {
	struct RefPtr<spPlayQueueModel> _playQueue; 
	struct RefPtr<spPlayHistoryModel> _playHistory; 
	struct RefPtr<spTrackListLoader> _trackListLoader; 
	BOOL _audioSessionIsConfiguredForPlayback; 
	BOOL _wasPlaying; 
	BOOL _wasInterrupted; 
	id<PlayableContextProtocol> _currentContextHolder; 
	SPSession* _session; 
	SPTrackContext* _playingContext; 
	UIImage* _nowPlayingImage; 
	id<PlayerAudioSessionDelegate> _audioSessionDelegate; 
	PlaybackErrorController* _errorController; 
	struct {
	} _player; 
	struct AdManager* _adManager; 
	NSObject<PlayableContextProtocol>* _pendingContext; 
	id _pauseDep; 
	id _previewDep; 
	unsigned _playbackBackgroundTask; 
	NSString* _hadAudioRoute; 
	PlaybackStateRestore* _playbackStateRestore; 
	PlayWhenOnlineController* _playWhenOnlineController; 
	NSArray* _preparedPreviews; 
	PlayControllerSkipsRemainingManager* _skipsRemainingManager; 
	PlayControllerCurrentTrackImageLoader* _currentTrackImageLoader; 
}
@property (nonatomic,copy) BOOL isPlayingWithDMCARules; 
@property (nonatomic,copy) double previewPosition; 
@property (nonatomic,copy) int previewTrackPosition; 
@property (nonatomic,copy) SPTrack* previewTrack; 
@property (nonatomic,retain) SPSession* session; 				//@synthesize session=_session - In the implementation block
@property (assign,nonatomic) BOOL pause; 
@property (assign,nonatomic) BOOL shuffle; 
@property (assign,nonatomic) BOOL repeat; 
@property (assign,nonatomic) BOOL repeatOne; 
@property (nonatomic,copy) BOOL canRepeatOne; 
@property (assign,nonatomic) double position; 
@property (assign,nonatomic) int trackPosition; 
@property (nonatomic,copy) int trackLength; 
@property (nonatomic,copy) SPTrack* previousPreviousTrack; 
@property (nonatomic,copy) SPTrack* previousTrack; 
@property (nonatomic,copy) SPTrack* currentTrack; 
@property (nonatomic,copy) SPContextRowReference* currentTrackRef; 
@property (nonatomic,copy) SPTrack* nextTrack; 
@property (nonatomic,copy) SPTrack* nextNextTrack; 
@property (nonatomic,copy) BOOL previousTrackAvailable; 
@property (nonatomic,copy) BOOL nextTrackAvailable; 
@property (nonatomic,copy) BOOL isSeekingEnabled; 
@property (nonatomic,copy) BOOL canSkipBackward; 
@property (nonatomic,copy) BOOL canSkipForward; 
@property (nonatomic,retain) id<PlayableContextProtocol> currentContextHolder; 				//@synthesize currentContextHolder=_currentContextHolder - In the implementation block
@property (assign,nonatomic) SPTrackContext* playingContext; 				//@synthesize playingContext=_playingContext - In the implementation block
@property (nonatomic,copy) int skipsRemaining; 
@property (nonatomic,retain) UIImage* nowPlayingImage; 				//@synthesize nowPlayingImage=_nowPlayingImage - In the implementation block
@property (assign,nonatomic) id<PlayerAudioSessionDelegate> audioSessionDelegate; 				//@synthesize audioSessionDelegate=_audioSessionDelegate - In the implementation block
@property (nonatomic,retain) PlaybackErrorController* errorController; 				//@synthesize errorController=_errorController - In the implementation block
@property (nonatomic,copy) struct RefPtr<spPlayQueueModel> playQueue; 				//@synthesize playQueue=_playQueue - In the implementation block
@property (assign,nonatomic) struct TrackPlayerMgr* player; 				//@synthesize player=_player - In the implementation block
@property (nonatomic,copy) struct AdManager* adManager; 				//@synthesize adManager=_adManager - In the implementation block
@property (nonatomic,retain) NSObject<PlayableContextProtocol>* pendingContext; 				//@synthesize pendingContext=_pendingContext - In the implementation block
@property (nonatomic,retain) id pauseDep; 				//@synthesize pauseDep=_pauseDep - In the implementation block
@property (nonatomic,retain) id previewDep; 				//@synthesize previewDep=_previewDep - In the implementation block
@property (assign,nonatomic) unsigned playbackBackgroundTask; 				//@synthesize playbackBackgroundTask=_playbackBackgroundTask - In the implementation block
@property (assign,nonatomic) BOOL audioSessionIsConfiguredForPlayback; 				//@synthesize audioSessionIsConfiguredForPlayback=_audioSessionIsConfiguredForPlayback - In the implementation block
@property (assign,nonatomic) BOOL wasPlaying; 				//@synthesize wasPlaying=_wasPlaying - In the implementation block
@property (assign,nonatomic) BOOL wasInterrupted; 				//@synthesize wasInterrupted=_wasInterrupted - In the implementation block
@property (nonatomic,retain) NSString* hadAudioRoute; 				//@synthesize hadAudioRoute=_hadAudioRoute - In the implementation block
@property (nonatomic,retain) PlaybackStateRestore* playbackStateRestore; 				//@synthesize playbackStateRestore=_playbackStateRestore - In the implementation block
@property (nonatomic,retain) PlayWhenOnlineController* playWhenOnlineController; 				//@synthesize playWhenOnlineController=_playWhenOnlineController - In the implementation block
@property (nonatomic,retain) NSArray* preparedPreviews; 				//@synthesize preparedPreviews=_preparedPreviews - In the implementation block
@property (nonatomic,retain) PlayControllerSkipsRemainingManager* skipsRemainingManager; 				//@synthesize skipsRemainingManager=_skipsRemainingManager - In the implementation block
@property (nonatomic,retain) PlayControllerCurrentTrackImageLoader* currentTrackImageLoader; 				//@synthesize currentTrackImageLoader=_currentTrackImageLoader - In the implementation block
@property (getter=isPreviewing,nonatomic,copy) BOOL previewing; 
@property (getter=isPreviewLoading,nonatomic,copy) BOOL previewLoading; 
@property (getter=isPreviewPlaying,nonatomic,copy) BOOL previewPlaying; 
+(id)keyPathsForValuesAffectingCurrentContextHolder;
+(id)keyPathsForValuesAffectingCurrentTrack;
+(id)keyPathsForValuesAffectingPreviousPreviousTrack;
+(id)keyPathsForValuesAffectingPreviousTrack;
+(id)keyPathsForValuesAffectingPreviousTrackAvailable;
+(id)keyPathsForValuesAffectingNextTrack;
+(id)keyPathsForValuesAffectingNextNextTrack;
+(id)keyPathsForValuesAffectingNextTrackAvailable;
+(id)keyPathsForValuesAffectingTrackLength;
+(id)keyPathsForValuesAffectingPosition;
+(id)keyPathsForValuesAffectingCanSkipForward;
+(id)keyPathsForValuesAffectingCanSkipBackward;
+(id)keyPathsForValuesAffectingShuffle;
+(id)keyPathsForValuesAffectingRepeat;
+(id)keyPathsForValuesAffectingIsPlayingWithDMCARules;
+(void)sp_addDebugActions:(id)arg1;
+(BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+(id)currentAudioRoute;
-(id)objectRepresentation;
-(void)setShuffle:(BOOL)arg1;
-(void)loginModeChanged:(id)arg1;
-(void)setErrorController:(id)arg1;
-(void)reloadNowPlayingInfo;
-(void)pauseChange:(id)arg1;
-(void)setPauseDep:(id)arg1;
-(void)previewingChange:(id)arg1;
-(void)setPreviewDep:(id)arg1;
-(void)setPlayWhenOnlineController:(id)arg1;
-(void)audioSessionInterruptionNotification:(id)arg1;
-(void)audioSessionRouteChangeNotification:(id)arg1;
-(void)setPlaybackStateRestore:(id)arg1;
-(void)setSkipsRemainingManager:(id)arg1;
-(void)setPendingContext:(id)arg1;
-(int)trackAvailabilityForResourceAvailability:(int)arg1;
-(int)availabilityForTrack:(id)arg1 inContext:(id)arg2;
-(BOOL)playContextShuffled:(id)arg1;
-(BOOL)playRow:(int)arg1 fromContext:(id)arg2;
-(BOOL)playRow:(int)arg1 fromContext:(id)arg2 paused:(BOOL)arg3 shuffled:(BOOL)arg4;
-(BOOL)playRow:(int)arg1 fromContext:(id)arg2 flags:(int)arg3 offset:(int)arg4;
-(void)ensureCorrectLoginMode;
-(void)discardPreviews;
-(void)setCurrentContextHolder:(id)arg1;
-(BOOL)isUsingLocalPlayer;
-(BOOL)playRow:(int)arg1 fromContext:(id)arg2 flags:(int)arg3;
-(BOOL)playRow:(int)arg1 fromContext:(id)arg2 paused:(BOOL)arg3 shuffled:(BOOL)arg4 offset:(int)arg5;
-(void)playRowWhenOnline:(int)arg1 fromContext:(id)arg2 paused:(BOOL)arg3 shuffled:(BOOL)arg4 offset:(int)arg5;
-(BOOL)canPlayTrack:(id)arg1 inContext:(id)arg2;
-(void)setPlayingContext:(id)arg1;
-(BOOL)queueRow:(int)arg1 fromContext:(id)arg2;
-(BOOL)playTrack:(id)arg1 fromLink:(id)arg2;
-(void)setTrackPosition:(int)arg1;
-(void)setRepeatOne:(BOOL)arg1;
-(BOOL)skipToPreviousTrack:(BOOL)arg1;
-(void)setPreparedPreviews:(id)arg1;
-(struct Array<spPreviewInfo, const spPreviewInfo &, 64, true>)previewInfosForAudioPreviews:(id)arg1;
-(void)matchAudioSessionWithPlayState:(int)arg1;
-(void)setAudioSessionIsConfiguredForPlayback:(BOOL)arg1;
-(BOOL)_shouldModifyAudioSession;
-(void)setPlaybackBackgroundTask:(unsigned)arg1;
-(void)setWasInterrupted:(BOOL)arg1;
-(void)setHadAudioRoute:(id)arg1;
-(void)skipsRemainingManagerDidUpdateSkipsRemaining:(id)arg1;
-(BOOL)playContext:(id)arg1 forceShuffle:(BOOL)arg2;
-(BOOL)queueNext:(id)arg1 fromContext:(id)arg2;
-(void)setPlaybackErrorControllerDelegate:(id)arg1;
-(void)setAudioSessionDelegate:(id)arg1;
-(void)preparePreviews:(id)arg1;
-(BOOL)playPreviews;
-(void)handlePlayerIsOfflineError;
-(void)handlePlayerChangeError;
-(BOOL)playFromContext:(id)arg1;
-(void)playTrackCommand:(id)arg1;
-(BOOL)playOrQueueRow:(int)arg1 fromContext:(id)arg2;
-(BOOL)dequeueTrackAtIndex:(unsigned)arg1;
-(void)togglePlaying;
-(void)toggleShuffle;
-(void)toggleRepeat;
-(void)takePosition:(id)arg1;
-(BOOL)willSkipToPreviousSkipToStart;
-(void)skipToPreviousTrack;
-(void)skipToNextTrack;
-(void)setInbox:(id)arg1;
-(BOOL)isPlayingRadioContext;
-(void)setNowPlayingImage:(id)arg1;
-(void)setWasPlaying:(BOOL)arg1;
-(void)setCurrentTrackImageLoader:(id)arg1;
-(int)currentQueueIndex;
-(int)numberOfRowsInQueue;
-(BOOL)restoreWithObjectRepresentation:(id)arg1;
-(void)setSession:(id)arg1;
-(id)initWithSession:(id)arg1;
-(void)dealloc;
-(void)invalidate;
-(void)setPosition:(double)arg1;
-(id).cxx_construct;
-(void)reset;
-(id)queue;
-(void)setRepeat:(BOOL)arg1;
-(void).cxx_destruct;
-(void)setPause:(BOOL)arg1;
-(void)setPlayer:(struct TrackPlayerMgr*)arg1;
@end